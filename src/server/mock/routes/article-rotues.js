// There's a container that is responsible to centrally manage all mock data
// and it provides methods for accessing, regenerating mock data
// Using Observer Pattern
// The Mock Data Storage is a K-V base container, the key is a pair of data that includes the data name and the data type.
// The user (e.g. the request handler) can access the data through .get(name, type) method with a key.
// When it does, the storage will return the examples that were generated by correspondent data generator before.
// If the user wants to reflesh mock data, use regenerate() method, it will inform all data generator to create new
// mock value then replace the old example internally.
// Lastly, the user can addGenerator by addGenerator(name, type, generator) method. No deletion method is provided for
// generator, which I think, is not neccessary.

// To sum up, the Mock Data Storage has three method publicly, there are get(name, type) and regenerate() and addGenerator(name, type, generator).

var express = require('express');
var util = require('../util');
var mockDataStorage = require('../mock-data-storage');

var articleRoutes = express.Router();

var responseNothing = util.mockedRequestHandlers.responseNothing;

articleRoutes.post('/', responseNothing);

articleRoutes.get('/', function (req, res) {
    res.send('OK');
});

articleRoutes.delete('/:articleID', responseNothing);

articleRoutes.patch('/:article', responseNothing);

articleRoutes.get('/about', function (req, res) {
    res.status(200).send('ok');
    data.getOne('article', 'text/html');
});

articleRoutes.patch('/about', responseNothing);

articleRoutes.get('/:articleID', function (req, res) {
    // Two kinds of content-type: text/html and text/json
    var content = data.get('article list', 'text/json');
    send
});

articleRoutes.get('/articles/digests', function (req, res) {

});

module.exports = {
    routes: articleRoutes,
    mountPath: '/articles'
};
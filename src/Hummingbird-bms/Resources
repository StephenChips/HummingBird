Resource query spec:

For any resource, it can be:

1. done accurate search by id

2. done accurate bulk search by multiple id

3. done bulk search by normal fields

4. return specific fields

5. return part of result

select Resource
where
  id = /* A set of id */,
  fieldA = /* A value */
  fieldB = /* B value */
  fieldC = /* C value */
return
  fields = ['fieldsA', 'fieldsB']
  range from 3 to 10
end;

PUT /api/Resource/search/?id[]=edc&id[]=abc&fieldsA[]=

update Resource
where id = 3
value
  fieldA = / A value /
  fieldB = / B Value /
end;

delete Resource
where id = [1,3,4,4]
end;

define Resource where url = /api/Resource

create Resource where
  id = /* id value */
  fieldA = /* A value */
  fieldB = /* B value */
  fieldC = /* C value */
end;

var query = Resource.select(name : string)
  .where({
      id: [1,3,4,5],
      fields: {
          fieldsA: 'a',
          fieldsB: 'b',
      }
  })
  .result({
      includeFields: ['fieldsA', ''] | 'all',
      range: [0, 10]
  });

query.toString();
query.method();
query.send();

Resource.delete(name : string)
  .where({
      id: [1,3,43,5]
  });

Resource.update(name)
  .where({
      id: [1,3,4,5]
  })
  .values({
      fieldA: 'fieldA',
      fieldB: 'fieldB'
  })
  .send();


Resource.create(name).id(3).fields({
    'fieldA': 'fieldA'
}).send();

Resource.define(resouceName, url);

return Promise<Array, ResourceError>

class ResourceError {
    name: 'ResourceError',
    reason: string, 
    httpCode: number
}